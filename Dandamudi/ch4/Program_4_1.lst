     1                                  ;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
     2                                  ;assemble and link with 
     3                                  ;assemble: -->> nasm -f win64 -o Program_4_1.o Program_4_1.asm -l Program_4_1.lst
     4                                  ;link:	   -->> gcc -o Program_4_1 Program_4_1.o
     5                                  ;run:      -->> Program_4_1
     6                                  ;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
     7                                  ;-----------------------------------------
     8                                  extern printf, scanf		
     9                                  
    10                                  segment .data
    11 00000000 506F72206661766F72-         msj     db "Por favor, ingrese un caracter: ",0,10
    11 00000009 2C20696E6772657365-
    11 00000012 20756E206361726163-
    11 0000001B 7465723A20000A     
    12 00000022 456C20636F6469676F-         msj1    db "El codigo ASCII de %llc en binario es: ",0
    12 0000002B 204153434949206465-
    12 00000034 20256C6C6320656E20-
    12 0000003D 62696E6172696F2065-
    12 00000046 733A2000           
    13 0000004A 256C6C7500                  rpt     db "%llu",0
    14 0000004F 0A4465736561205361-         msj2    db 10,"Desea Salir [Y/N]",0
    14 00000058 6C6972205B592F4E5D-
    14 00000061 00                 
    15 00000062 256C6C63                    fmt     db "%llc"
    16 00000066 08                          bsize   db 8
    17                                  segment .bss
    18 00000000 ????????????????            chtr    resq    1       ;caracter
    19 00000008 ????????????????            aux     resq    1
    20                                  segment .text 
    21                                  global main 					
    22                                  main:
    23                                  
    24 00000000 4883EC20                sub rsp,0x20	
    25                                  read_char:  
    26 00000004 48B9-                               mov rcx,msj
    26 00000006 [0000000000000000] 
    27 0000000E E8(00000000)                        call printf
    28                                  
    29 00000013 48B9-                               mov rcx,fmt
    29 00000015 [6200000000000000] 
    30 0000001D 48BA-                               mov rdx,chtr
    30 0000001F [0000000000000000] 
    31 00000027 E8(00000000)                        call scanf
    32                                              
    33 0000002C 48B9-                               mov rcx,msj1
    33 0000002E [2200000000000000] 
    34 00000036 488B1425[00000000]                  mov rdx,qword[chtr]
    35 0000003E E8(00000000)                        call printf
    36                                  
    37 00000043 BB80000000                          mov rbx,0x80
    38                                              ;mov r11,8
    39                                  print_bit:  
    40 00000048 48851C25[00000000]                  test qword[chtr],rbx
    41 00000050 7416                                jz print_0
    42 00000052 48B9-                               mov rcx,rpt
    42 00000054 [4A00000000000000] 
    43 0000005C BA01000000                          mov rdx,1
    44 00000061 E8(00000000)                        call printf
    45 00000066 EB14                                jmp skip
    46                                  print_0:    
    47 00000068 48B9-                               mov rcx,rpt
    47 0000006A [4A00000000000000] 
    48 00000072 BA00000000                          mov rdx,0
    49 00000077 E8(00000000)                        call printf
    50                                  skip:       
    51 0000007C 48D1EB                              shr rbx,1
    52 0000007F FE0C25[66000000]                    dec byte[bsize]
    53 00000086 803C25[66000000]00                  cmp byte[bsize],0
    54 0000008E 75B8                                jne print_bit
    55                                  
    56 00000090 48B9-                               mov rcx,msj2
    56 00000092 [4F00000000000000] 
    57 0000009A E8(00000000)                        call printf
    58                                  
    59 0000009F 48B9-                               mov rcx,fmt
    59 000000A1 [6200000000000000] 
    60 000000A9 48BA-                               mov rdx,aux
    60 000000AB [0800000000000000] 
    61 000000B3 E8(00000000)                        call scanf
    62                                  
    63 000000B8 48833C25[08000000]-                 cmp qword[aux],'Y'
    63 000000C0 59                 
    64 000000C1 0F843DFFFFFF                        je read_char
    65 000000C7 4883C420                add rsp,0x20
    66 000000CB C3                      ret
    67                                  ;---------------------------------------
    68                                  ;..........subrutinas....................	
